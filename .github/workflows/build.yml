# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Overal test run

on:
  push:
    branches: [ github-actions ]
  pull_request:
    branches: [ github-actions ]

jobs:
  job-vm:

    runs-on: ubuntu-latest

    env:
        HASS_SERVER: http://127.0.0.1:8123
        HASS_TOKEN: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJmMzI5NmEzYTA0ZDc0NTI3OGUzMDIzN2I5MDlmYmM5MSIsImlhdCI6MTU5ODczMzU5MywiZXhwIjoxOTE0MDkzNTkzfQ.HEGTdkF5tt473J3WktjUIb71x06tZwcZUjp070QzLec
        TERM: xterm
        MAX_LINE_LENGHT: 127

    steps:
    - uses: actions/checkout@v2

    # Setup python
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    # Get path to python
    - name: Get path to python
      run: export PATH_TO_PYTHON=$(which python)

    # Install pip dependencies
    - name: Install pip dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install allure-behave

    # Copy skill befor HA kicks in
    - name: Mycroft - Copy skill to mycroft
      run: |
        mkdir -p /opt/mycroft/skills/homeassistant.mycroftai
        cp -R ${{ github.workspace }}/* /opt/mycroft/skills/homeassistant.mycroftai
        ls -al /opt/mycroft/skills/homeassistant.mycroftai
        cp ${{ github.workspace }}/test/ci/Mycroft/settingsmeta.yaml /opt/mycroft/skills/homeassistant.mycroftai/
        cp ${{ github.workspace }}/test/ci/Mycroft/settings.json /opt/mycroft/skills/homeassistant.mycroftai/

    # Start Home Assistant
    - name: HA - pull and start docker image
      run: |
        docker pull homeassistant/home-assistant:2021.9
        docker run -d -p 127.0.0.1:8123:8123 --name="home-assistant" -v ${{ github.workspace }}/test/ci/HA/:/config -v /etc/localtime:/etc/localtime:ro homeassistant/home-assistant:0.114.3

    # Install Mycroft
    - name: Mycroft - install Mycroft
      run: |
        git clone https://github.com/MycroftAI/mycroft-core.git /opt/mycroft-core
        ls /opt
        cp ${{ github.workspace }}/test/ci/Mycroft/dev_setup.sh /opt/mycroft-core/
        chmod +x /opt/mycroft-core/dev_setup.sh
        /opt/mycroft-core/dev_setup.sh --allow-root -ci -sm -p $PATH_TO_PYTHON
        source /opt/mycroft-core/.venv/bin/activate
        /opt/mycroft-core/bin/mycroft-pip install -r ${{ github.workspace }}/requirements.txt

    # Install Home Assistant cli tool
    - name: HA - install cli
      run: pip install homeassistant-cli

    # Set Home Assistant cli tool
    - name: HA - set cli
      run: source <(hass-cli completion bash)

    # Get base info from Home Assistant
    - name: HA - show base info
      run: hass-cli info

    # Get state info from Home Assistant
    - name: HA - show states
      run: hass-cli state list

    # Wait for MC to start
    - name: Mycroft - Wait for start
      run: sleep 4m

    #######################################################################################
    # Section with Linters

    # Clear VKtest
    - name: Mycroft - Clear VKtest
      run: /opt/mycroft-core/bin/mycroft-skill-testrunner vktest clear

    # Run VKtest
    - name: Mycroft - Run VKtest
      run: /opt/mycroft-core/bin/mycroft-skill-testrunner vktest -t homeassistant.mycroftai -f allure_behave.formatter:AllureFormatter -o ${{ github.workspace }}/allure_results

    # GH get history
    - name: Github Pages - Pull GH history
      uses: actions/checkout@v2
      if: always()
      continue-on-error: true
      with:
        repository:  Tony763/Tony763.github.io
        path: ./gh-pages
        ref: master

    # GH generate VKreport
    - name: Allure - generate report
      uses: simple-elf/allure-report-action@master
      id: allure-report
      with:
        allure_results: ${{ github.workspace }}/allure_results
        gh_pages: gh-pages/skill-homeassistant/
        allure_report: allure-report
        allure_history: gh-pages/skill-homeassistant/allure-history

    # GH publish results
    - name: Github Pages - publish results
      if: always()
      uses: peaceiris/actions-gh-pages@v3
      with:
        deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY_MS_HA }}
        external_repository: Tony763/Tony763.github.io
        publish_dir: ${{ github.workspace }}/gh-pages
        publish_branch: master

    # Job status - publish link to VK
    - name: State - publish VK test
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'VK Test report generated'
        state: ${{ steps.allure-report.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}
        target_url: https://tony763.github.io/skill-homeassistant/allure-history/${{ github.run_number }}/

    #######################################################################################
    # Section with Linters

    # Linters - pylint
    - name: pylint
      if: always()
      uses: ricardochaves/python-lint@v1.4.0
      id: pylint
      with:
        use-pylint: true
        use-pycodestyle: false
        use-flake8: false
        use-black: false
        use-mypy: false
        use-isort: false
        extra-pylint-options: ""

    # Job status - publish pylint
    - name: State - pylint
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'pylint'
        state: ${{ steps.pylint.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}

    # Linters - pycodestyle
    - name: State - pycodestyle
      if: always()
      uses: ricardochaves/python-lint@v1.4.0
      id: pycodestyle
      with:
        use-pylint: false
        use-pycodestyle: true
        use-flake8: false
        use-black: false
        use-mypy: false
        use-isort: false
        extra-pycodestyle-options: "--max-line-length=$MAX_LINE_LENGHT"

    # Job status - publish pycodestyle
    - name: State - pycodestyle
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'pycodestyle'
        state: ${{ steps.pycodestyle.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}

    # Linters - flake8
    - name: State - flake8
      if: always()
      uses: ricardochaves/python-lint@v1.4.0
      id: flake8
      with:
        use-pylint: false
        use-pycodestyle: false
        use-flake8: true
        use-black: false
        use-mypy: false
        use-isort: false
        extra-flake8-options: "--max-line-length=${{ MAX_LINE_LENGHT }}"

    # Job status - publish flake8
    - name: State - flake8
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'flake8'
        state: ${{ steps.flake8.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}

    # Linters - mypy
    - name: State - mypy
      if: always()
      uses: ricardochaves/python-lint@v1.4.0
      id: mypy
      with:
        use-pylint: false
        use-pycodestyle: false
        use-flake8: false
        use-black: false
        use-mypy: true
        use-isort: false
        extra-mypy-options: ""

    # Job status - publish mypy
    - name: State - mypy
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'mypy'
        state: ${{ steps.mypy.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}

    # Linters - isort
    - name: State - isort
      if: always()
      uses: ricardochaves/python-lint@v1.4.0
      id: isort
      with:
        use-pylint: false
        use-pycodestyle: false
        use-flake8: false
        use-black: false
        use-mypy: false
        use-isort: true
        extra-isort-options: ""

    # Job status - publish isort
    - name: State - isort
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'isort'
        state: ${{ steps.isort.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}


# TODO: Variable with path to python?
