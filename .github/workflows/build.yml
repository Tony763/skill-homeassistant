# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Overall test run

on:
  push:
    branches-ignore:
      - gh-pages
  pull_request:
    branches-ignore:
      - gh-pages

jobs:
  job-vm:

    runs-on: ubuntu-latest

    env:
        HASS_SERVER: http://127.0.0.1:8123
        HASS_TOKEN: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiIyMDY0YjI0YzgyYzY0Y2Q1ODU0ZmRlN2M5ODAyMjVhOCIsImlhdCI6MTYzMzg1NTkxNCwiZXhwIjoxOTQ5MjE1OTE0fQ.wMJ60s8bGe7ygk_xvtnxRixBIYthrCWZyfBKn4e9wdU
        TERM: xterm
        MAX_LINE_LENGTH: 127
        MYCROFT_VENV: /opt/mycroft-core/.venv/bin/activate
        HA_VERSION: 2021.9
        HA_VIRTUAL_VERSION: v0.7.2

    steps:
    - uses: actions/checkout@v2

    # Setup python
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    #######################################################################################
    # Section with prerequisite installations

    # Get path to python
    - name: Get path to python
      run: echo "PATH_TO_PYTHON=$(which python)" >> $GITHUB_ENV

    # Get repository name
    - run: echo "REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
      shell: bash

    # Install pip dependencies HA
    - name: Install pip dependencies HA
      run: |
        pip install allure-behave

    # Copy skill before HA kicks in
    - name: Mycroft - Copy skill to mycroft
      run: |
        mkdir -p /opt/mycroft/skills/homeassistant.mycroftai
        cp -R ${{ github.workspace }}/* /opt/mycroft/skills/homeassistant.mycroftai
        ls -al /opt/mycroft/skills/homeassistant.mycroftai
        cp ${{ github.workspace }}/test/ci/Mycroft/settings.json /opt/mycroft/skills/homeassistant.mycroftai/

    # Install Mycroft
    - name: Mycroft - install Mycroft
      run: |
        git clone https://github.com/MycroftAI/mycroft-core.git /opt/mycroft-core
        ls /opt
        chmod +x /opt/mycroft-core/dev_setup.sh
        /opt/mycroft-core/dev_setup.sh --allow-root -ci -sm -p ${{ env.PATH_TO_PYTHON }}
        source ${{ env.MYCROFT_VENV }}
        /opt/mycroft-core/bin/mycroft-pip install -r ${{ github.workspace }}/requirements.txt
        /opt/mycroft-core/bin/mycroft-config set tts.module dummy
        /opt/mycroft-core/bin/mycroft-start all

    # Remove pairing skill if installed
    - name: Mycroft - Remove pairing skill
      run: /opt/mycroft-core/bin/mycroft-msm remove mycroft-pairing
      continue-on-error: true

    # Install workflow dependencies
    - name: Install workflow dependencies
      run: |
        source ${{ env.MYCROFT_VENV }}
        pip install allure-behave
        pip install allure-pytest
        pip install pylint

    # Get virtual component for HA
    - name: HA - get hass virtual component
      run: git clone --depth 1 --branch ${{ env.HA_VIRTUAL_VERSION }} https://github.com/twrecked/hass-virtual.git /tmp/hass-virtual

    # Start Home Assistant
    - name: HA - pull and start docker image
      run: |
        docker pull homeassistant/home-assistant:${{ env.HA_VERSION }}
        docker run -d -p 127.0.0.1:8123:8123 --name="home-assistant" -v ${{ github.workspace }}/test/ci/HA/:/config -v /tmp/hass-virtual/custom_components:/config/custom_components -v /etc/localtime:/etc/localtime:ro homeassistant/home-assistant:${{ env.HA_VERSION }}

    # Install Home Assistant cli tool
    - name: HA - install cli
      run: pip install homeassistant-cli

    # Set Home Assistant cli tool
    - name: HA - set cli
      run: source <(hass-cli completion bash)

    # Get base info from Home Assistant
    - name: HA - show base info
      run: hass-cli info

    # Get state info from Home Assistant
    - name: HA - show states
      run: hass-cli state list

    #######################################################################################
    # Section with unittests - bust run before VK tests

    # Run Unitests with output to allure
    - name: Unittest
      id: unittest
      run: |
        source /opt/mycroft-core/.venv/bin/activate
        py.test --alluredir=${{ github.workspace }}/allure_results
      env:
        HASS_TOKEN: ${{ env.HASS_TOKEN }}
      continue-on-error: true

    #######################################################################################
    # Section with VK tests

    # Clear VKtest
    - name: Mycroft - Clear VKtest
      run: /opt/mycroft-core/bin/mycroft-skill-testrunner vktest clear

    # Run VKtest
    - name: Mycroft - Run VKtest
      run: /opt/mycroft-core/bin/mycroft-skill-testrunner vktest -t homeassistant.mycroftai -f allure_behave.formatter:AllureFormatter -o ${{ github.workspace }}/allure_results

     #######################################################################################
    # Section with Mycroft logs

    # Create directory for Mycroft logs
    - name: MC - directory for logs
      run: mkdir -p ${{ github.workspace }}/allure-history/${{ github.run_number }}
      if: always()

    # Copy Mycroft logs
    - name: MC - copy logs
      run: if [[ -d /var/log/mycroft ]]; then cp -r /var/log/mycroft ${{ github.workspace }}/allure-history/${{ github.run_number }}/; fi
      shell: bash

    #######################################################################################
    # Section with Allure report

    # GH get history
    - name: Github Pages - Pull GH history
      uses: actions/checkout@v2
      if: always()
      continue-on-error: true
      with:
        path: ${{ github.workspace }}/gh-pages
        ref: gh-pages

    # GH generate Unit/VK report
    - name: Allure - generate report
      uses: simple-elf/allure-report-action@master
      id: allure-report
      if: always()
      with:
        allure_results: ${{ github.workspace }}/allure_results
        gh_pages: gh-pages
        allure_report: allure-report
        allure_history: allure-history

    # GH publish results
    - name: Github Pages - publish results
      if: always()
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ${{ github.workspace }}/allure-history
        PUBLISH_BRANCH: gh-pages

    #######################################################################################
    # Section with publish status links

    # Job status - publish link to Unit/VK
    - name: State - publish Unit/VK test
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'Unit/VK Test report generated'
        state: ${{ steps.allure-report.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}
        target_url: https://${{ github.repository_owner	}}.github.io/${{ env.REPOSITORY_NAME }}/${{ github.run_number }}/

    # Job status - publish link to Mycroft logs
    - name: State - publish Mycroft logs
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'Mycroft logs'
        state: success
        sha: ${{github.event.pull_request.head.sha || github.sha}}
        target_url: https://github.com/${{ github.repository }}/tree/gh-pages/${{ github.run_number }}/mycroft/

    #######################################################################################
    # Section with Linters

    # Linters - pylint
    - name: pylint
      if: always()
      id: pylint
      run: |
        source $MYCROFT_VENV
        pylint .

    # Linters - pycodestyle
    - name: pycodestyle
      if: always()
      uses: ricardochaves/python-lint@v1.4.0
      id: pycodestyle
      with:
        use-pylint: false
        use-pycodestyle: true
        use-flake8: false
        use-black: false
        use-mypy: false
        use-isort: false
        extra-pycodestyle-options: "--max-line-length=${{ env.MAX_LINE_LENGTH }}"

    # Linters - flake8
    - name: flake8
      if: always()
      uses: ricardochaves/python-lint@v1.4.0
      id: flake8
      with:
        use-pylint: false
        use-pycodestyle: false
        use-flake8: true
        use-black: false
        use-mypy: false
        use-isort: false
        extra-flake8-options: "--max-line-length=${{ env.MAX_LINE_LENGTH }}"

    # Linters - isort
    - name: isort
      if: always()
      uses: ricardochaves/python-lint@v1.4.0
      id: isort
      with:
        use-pylint: false
        use-pycodestyle: false
        use-flake8: false
        use-black: false
        use-mypy: false
        use-isort: true
        extra-isort-options: ""

    #######################################################################################
    # Section with Publish state of Linters

    # Get id for accessing logs
    - name: Get step id for accessing step status logs
      id: linters_status
      if: always()
      run: |
        JOBS=$(curl -H "Accept: application/vnd.github.v3+json" ${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/jobs | jq -r '.jobs')
        for row in $(echo "${JOBS}" | jq -r '.[] | @base64'); do
            _jq() {
              echo "${row}" | base64 --decode | jq -r ${1}
            }
            if [ $(echo "$( _jq '.name')") = "${GITHUB_JOB}" ]; then
              echo "LOG_ID=$(_jq '.id')" >> $GITHUB_ENV
              for step in $(echo "$(_jq '.steps')" | jq -r '.[] | @base64'); do
                _jqs() {
                echo "${step}" | base64 --decode | jq -r ${1}
              }
              echo "::set-output name=$(_jqs '.name')::$(_jqs '.number')"
              echo "$(_jqs '.name'):$(_jqs '.number')"
              done
            fi
        done

    # Job status - publish pylint
    - name: State - pylint
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'pylint'
        state: ${{ steps.pylint.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}
        target_url: https://github.com/${{ github.repository }}/runs/${{ env.LOG_ID }}#step:${{ steps.linters_status.outputs.pylint }}:1

    # Job status - publish pycodestyle
    - name: State - pycodestyle
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'pycodestyle'
        state: ${{ steps.pycodestyle.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}
        target_url: https://github.com/${{ github.repository }}/runs/${{ env.LOG_ID }}#step:${{ steps.linters_status.outputs.pycodestyle }}:1

    # Job status - publish flake8
    - name: State - flake8
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'flake8'
        state: ${{ steps.flake8.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}
        target_url: https://github.com/${{ github.repository }}/runs/${{ env.LOG_ID }}#step:${{ steps.linters_status.outputs.flake8 }}:1

    # Job status - publish isort
    - name: State - isort
      if: always()
      uses: Sibz/github-status-action@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: 'isort'
        state: ${{ steps.isort.outcome }}
        sha: ${{github.event.pull_request.head.sha || github.sha}}
        target_url: https://github.com/${{ github.repository }}/runs/${{ env.LOG_ID }}#step:${{ steps.linters_status.outputs.isort }}:1

